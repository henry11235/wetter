name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest --cov=src tests/

  build-macos:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Build macOS app
      run: poetry run pyinstaller --windowed --name "Wetter" --add-data "assets:assets" --icon=icon.icns run.py

    - name: Upload macOS app as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Wetter-macOS
        path: dist/Wetter.app

    - name: Zip the app for release
      run: |
        cd dist
        zip -r Wetter-macOS.zip Wetter.app

    - name: Upload macOS zip as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Wetter-macOS-zip
        path: dist/Wetter-macOS.zip

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    if: startsWith(github.ref, 'refs/tags/v')
    needs: test
    permissions:
      contents: write
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Build Windows EXE
      run: poetry run pyinstaller --onefile --noconsole --name Wetter --add-data "assets;assets" run.py

    - name: Upload Windows EXE as artifact
      uses: actions/upload-artifact@v4
      with:
        name: Wetter-Windows
        path: dist/Wetter.exe

  create-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-macos, build-windows]
    permissions:
      contents: write
    steps:
    - name: Download macOS zip
      uses: actions/download-artifact@v4
      with:
        name: Wetter-macOS-zip
        path: macos-zip

    - name: Download Windows Executable
      uses: actions/download-artifact@v4
      with:
        name: Wetter-Windows
        path: windows

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          macos-zip/Wetter-macOS.zip
          windows/Wetter.exe
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
